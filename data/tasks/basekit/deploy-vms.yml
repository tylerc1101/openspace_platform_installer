---
- name: Create OpenSpace VMs
  hosts: mgmt_kvm
  become: yes
  vars:
    images_dir: /var/lib/libvirt/config/images

  tasks:
    # Pre-flight checks
    - name: Ensure libvirt config directory exists
      ansible.builtin.file:
        path: /var/lib/libvirt/config
        state: directory
        mode: '0755'

    - name: Check if base-kit archive variable is defined
      ansible.builtin.fail:
        msg: "Variable 'basekit' is not defined in group_vars"
      when: basekit is not defined

    - name: Check if libvirt config directory is empty
      ansible.builtin.find:
        paths: /var/lib/libvirt/config
        file_type: any
        hidden: yes
      register: config_dir_contents

    - name: Copy base-kit config files
      ansible.builtin.copy:
        src: "/install/images/{{ basekit }}/config/"
        dest: "/var/lib/libvirt/config"
        remote_src: no
      when: config_dir_contents.matched == 0

    - name: Set correct permissions on all images in images directory
      ansible.builtin.file:
        path: "{{ images_dir }}"
        owner: qemu
        group: qemu
        mode: '0644'
        recurse: yes

    - name: Set correct permissions on images directory
      ansible.builtin.file:
        path: "{{ images_dir }}"
        owner: qemu
        group: qemu
        mode: '0755'
        recurse: no

    - name: Check if hardened image exists
      ansible.builtin.stat:
        path: "{{ images_dir }}/9_5_hardened_image_vm.qcow2"
      register: hardened_image_stat
      failed_when: not hardened_image_stat.stat.exists

    - name: Get list of existing VMs
      ansible.builtin.shell: virsh list --all --name
      register: existing_vms
      changed_when: false

    # ---------- MCM ----------
    - name: Check if MCM VM already exists
      ansible.builtin.set_fact:
        mcm_exists: "{{ 'mcm' in existing_vms.stdout_lines }}"

    - name: Create VM - MCM
      ansible.builtin.command:
        cmd: >
          virt-install
          --name mcm
          --memory {{ vm_mcm_memory | default(16384) }}
          --vcpus {{ vm_mcm_vcpus | default(8) }}
          --cpu host-passthrough
          --disk size=600,backing_store="{{ images_dir}}/9_5_hardened_image_vm.qcow2"
          --os-variant rhel9.5
          --network bridge=br-mgmt,model=virtio
          --import
          --noautoconsole
          --graphics vnc
          --boot uefi
          --print-xml
      register: mcm_xml
      when: not mcm_exists

    - name: Define MCM VM
      community.libvirt.virt:
        command: define
        xml: "{{ mcm_xml.stdout }}"
      when: not mcm_exists

    - name: Get MCM disk path
      ansible.builtin.shell: virsh domblklist mcm | grep vda | awk '{print $2}'
      register: mcm_disk
      changed_when: false
      when: not mcm_exists

    - name: Create network config for MCM enp1s0
      ansible.builtin.copy:
        dest: /tmp/mcm-ifcfg-enp1s0
        content: |
          TYPE=Ethernet
          BOOTPROTO=static
          NAME=static-enp1s0
          DEVICE=enp1s0
          ONBOOT=yes
          IPADDR=192.168.2.8
          PREFIX=24
          GATEWAY=192.168.2.1
          DNS1=192.168.2.1
      when: not mcm_exists

    - name: Configure MCM disk with network and SSH settings
      ansible.builtin.shell: |
        export LIBGUESTFS_BACKEND=direct
        guestfish -a {{ mcm_disk.stdout }} -i <<EOF
        # Network configuration
        upload /tmp/mcm-ifcfg-enp1s0 /etc/sysconfig/network-scripts/ifcfg-enp1s0
        chmod 0644 /etc/sysconfig/network-scripts/ifcfg-enp1s0
     
        # SSH key setup
        mkdir -p /home/kratos/.ssh
        chmod 0700 /home/kratos/.ssh
        upload /install/usr_home/{{ env }}/.ssh/mcm_ssh_key.pub /home/kratos/.ssh/authorized_keys
        chmod 0600 /home/kratos/.ssh/authorized_keys
    
        # Ensure SSH is enabled
        sh "systemctl enable sshd"
        EOF

    - name: Start MCM VM
      community.libvirt.virt:
        name: mcm
        state: running
        autostart: yes
      when: not mcm_exists
      register: mcm_start

    # ---------- OSMS ----------
    - name: Check if OSMS VM already exists
      ansible.builtin.set_fact:
        osms_exists: "{{ 'osms' in existing_vms.stdout_lines }}"

    - name: Create VM - OSMS
      ansible.builtin.command:
        cmd: >
          virt-install
          --name osms
          --memory {{ vm_osms_memory | default(32768) }}
          --vcpus {{ vm_osms_vcpus | default(16) }}
          --cpu host-passthrough
          --disk size=600,backing_store="{{ images_dir}}/9_5_hardened_image_vm.qcow2"
          --os-variant rhel9.5
          --network bridge=br-mgmt,model=virtio
          --import
          --noautoconsole
          --graphics vnc
          --boot uefi
          --print-xml
      register: osms_xml
      when: not osms_exists

    - name: Define OSMS VM
      community.libvirt.virt:
        command: define
        xml: "{{ osms_xml.stdout }}"
      when: not osms_exists

    - name: Get OSMS disk path
      ansible.builtin.shell: virsh domblklist osms | grep vda | awk '{print $2}'
      register: osms_disk
      changed_when: false
      when: not osms_exists

    - name: Create network config for OSMS enp1s0
      ansible.builtin.copy:
        dest: /tmp/osms-ifcfg-enp1s0
        content: |
          TYPE=Ethernet
          BOOTPROTO=static
          NAME=static-enp1s0
          DEVICE=enp1s0
          ONBOOT=yes
          IPADDR=192.168.2.9
          PREFIX=24
          GATEWAY=192.168.2.1
          DNS1=192.168.2.1
      when: not osms_exists

    - name: Configure MCM disk with network and SSH settings
      ansible.builtin.shell: |
        export LIBGUESTFS_BACKEND=direct
        guestfish -a {{ osms_disk.stdout }} -i <<EOF
        # Network configuration
        upload /tmp/osms-ifcfg-enp1s0 /etc/sysconfig/network-scripts/ifcfg-enp1s0
        chmod 0644 /etc/sysconfig/network-scripts/ifcfg-enp1s0
     
        # SSH key setup
        mkdir -p /home/kratos/.ssh
        chmod 0700 /home/kratos/.ssh
        upload /install/usr_home/{{ env }}/.ssh/osms_ssh_key.pub /home/kratos/.ssh/authorized_keys
        chmod 0600 /home/kratos/.ssh/authorized_keys
    
        # Ensure SSH is enabled
        sh "systemctl enable sshd"
        EOF
      when: not osms_exists

    - name: Start OSMS VM
      community.libvirt.virt:
        name: osms
        state: running
        autostart: yes
      when: not osms_exists
      register: osms_start

    # ---------- OSDC provisioner ----------
    - name: Check if OSDC provisioner VM already exists
      ansible.builtin.set_fact:
        osdc_exists: "{{ 'osdc-provisioner' in existing_vms.stdout_lines }}"

    - name: Check if Rocky ISO exists
      ansible.builtin.stat:
        path: "{{ images_dir }}/Rocky-9.4-x86_64-dvd.iso"
      register: rocky_iso_stat

    - name: Create VM - OSDC provisioner
      ansible.builtin.command:
        cmd: >
          virt-install
          --name osdc-provisioner
          --memory {{ vm_osdc_memory | default(6144) }}
          --vcpus {{ vm_osdc_vcpus | default(4) }}
          --cpu host-passthrough
          --disk size=100
          --location {{ images_dir }}/Rocky-9.4-x86_64-dvd.iso,initrd=isolinux/initrd.img,kernel=isolinux/vmlinuz
          --initrd-inject /var/lib/libvirt/config/vm_config/osdc/prov_vm_ks.cfg
          --extra-args="inst.ks=file:/prov_vm_ks.cfg console=tty0"
          --os-variant=rocky9
          --network bridge=br-iDRAC,model=virtio
          --noautoconsole
      when: 
        - not osdc_exists
      register: osdc_result

    - name: Wait for initial boot and all reboots to complete
      ansible.builtin.pause:
        minutes: 2  # Adjust based on how long the reboots take
      when: mcm_start is changed or osms_start is changed